"""
    Keeping this file as an example of "the hard way" of writing views.
    Replaced by new views.py
"""

from django.db.models import F
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.urls import reverse
from .models import Choice, Question

""" longform render HttpResponse with template
def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    template = loader.get_template("polls/index.html")
    context = {
        "latest_question_list": latest_question_list,
    }
    return HttpResponse(template.render(context, request))
"""

# Shortcut render
def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {
        "latest_question_list": latest_question_list,
    }
    return render(request, "polls/index.html", context)

# Longform 404
"""
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")

    context = {
        "question": question
    }
    return render(request, "polls/detail.html", context)
    # old stub
    #return HttpResponse("You're looking at question %s." % question_id)
"""

def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/detail.html", {"question": question})

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes = F("votes") + 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))

# Stub
def results(request, question_id):
    #this could've been done with just question (as in the tutorial part 4 example)
    # but I'll leave it as-is since i learned something.
    question = Question.objects.get(pk=question_id)
    choices = Choice.objects.filter(question=question_id)[:]
    response = "You're looking at the result of question %s." % question_id
    context = {
        'title': question.question_text,
        'subtitle': response,
        'question': question,
        'choices': choices
    }
    return render(request, "polls/results.html", context)